# Server Port
server.port=8080

# --- MySQL Datasource Configuration ---
# ISSUE 1 FIX: Change 'sys' to your actual database name (e.g., 'oauth_db')
spring.datasource.url=jdbc:mysql://localhost:3306/sys
spring.datasource.username=root
spring.datasource.password=root123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# --- Spring Security OAuth2 Client Configuration (for Google Login) ---
# ISSUE 3 FIX: Changed prefix from 'authorization-server.client' to 'client.registration' and 'client.provider'
spring.security.oauth2.client.registration.google.client-id=182191285032-v8iqujomc0h4756b5n461ecfdfabhh25.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,email,profile
# The redirect-uris property is typically not explicitly needed here if you use the default pattern:
# http://localhost:8080/login/oauth2/code/{registrationId}
# But if you want to be explicit or have custom ones, ensure they are configured in Google Cloud Console
# spring.security.oauth2.client.registration.google.redirect-uri=http://127.0.0.1:8080/login/oauth2/code/google

spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com

# Logging Levels (Optional, for debugging)
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# jwt.secret is not directly used for OAuth2 Client setup, so it can be omitted or kept if used elsewhere.
# For this specific OAuth2 Client (login with Google) scenario, it's not relevant.
# jwt.secret=yourSuperSecretKeyThatIsAtLeast32BytesLongForHS256